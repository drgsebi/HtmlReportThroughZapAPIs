<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="report.html.xsl" ?><!--<?xml-stylesheet type="text/xsl" href="ZapAPIsInCI-Report-2014-10-27_01-08-39.xslt" ?>--><OWASPZAPReport generated="Mon, 27 Oct 2014 01:30:02" version="2.3.1">
<site host="sqli" name="https://sqli:8021" port="8021" ssl="true"><alerts><alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>ASP.NET_SessionId=spztjnofpyqvsfdghzelmuer; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=spztjnofpyqvsfdghzelmuer; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>ASP.NET_SessionId=spztjnofpyqvsfdghzelmuer; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=spztjnofpyqvsfdghzelmuer; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9_oAl2eYugechS_QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8-h1AT67Ubw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9_oAl2eYugechS_QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8-h1AT67Ubw2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9_oAl2eYugechS_QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8-h1AT67Ubw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9_oAl2eYugechS_QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8-h1AT67Ubw2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>input</param>
  <attack>&lt;input data-val="true" data-val-required="The Password field is required." id="Password" name="Password" type="password" /&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9</attack>
  <otherinfo>¶8{©£åY�‘XW×�›¶åIÓÃ"°\x0013Å\x0011ÛM\x0001¾&#127;&amp;$ô××Ð§�™\x001c�&lt;½</otherinfo>
  <evidence>tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>¶8{©£åY�‘XW×�›¶åIÓÃ"°\x0013Å\x0011ÛM\x0001¾&#127;&amp;$ô××Ð§�™\x001c�&lt;½
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8</attack>
  <otherinfo>B&amp;Y6àíOÑi\x0017Ç\x0003­š\x0011\x0010E¬Ë³ñ\x0016á¯Ú×Ô!­�‘»K(X’ë­yˆÐÛ\x00083p'„d
cG</otherinfo>
  <evidence>QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>B&amp;Y6àíOÑi\x0017Ç\x0003­š\x0011\x0010E¬Ë³ñ\x0016á¯Ú×Ô!­�‘»K(X’ë­yˆÐÛ\x00083p'„d
cG
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>WFJfjWjQ2ChkS2XGTsakqqpEBrG1QX3SffrNbyIuSB3rn5lAk2c6OXA2jppt6vH</attack>
  <otherinfo>XR_�hÐØ(dKeÆNÆ¤ªªD\x0006±µA}Ò}úÍo".H\x001dëŸ™@“g:9p6Žšm</otherinfo>
  <evidence>WFJfjWjQ2ChkS2XGTsakqqpEBrG1QX3SffrNbyIuSB3rn5lAk2c6OXA2jppt6vH</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>XR_�hÐØ(dKeÆNÆ¤ªªD\x0006±µA}Ò}úÍo".H\x001dëŸ™@“g:9p6Žšm
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>UwntwL2F0ZYq9abgFrYhGe302olgLBkU1</attack>
  <otherinfo>S	íÀ½…Ñ–*õ¦à\x0016¶!\x0019íôÚ‰`,\x0019\x0014</otherinfo>
  <evidence>UwntwL2F0ZYq9abgFrYhGe302olgLBkU1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>S	íÀ½…Ñ–*õ¦à\x0016¶!\x0019íôÚ‰`,\x0019\x0014
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9_oAl2eYugechS_QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8-h1AT67Ubw2</attack>
  <otherinfo>¶8{©£åY�‘XW×�›¶åIÓÃ"°\x0013Å\x0011ÛM\x0001¾&#127;&amp;$ô××Ð§�™\x001c�&lt;½þ€%Ùæ.�ç!Kô"e“n\x000eÔý\x0016‘|p:Ù¡\x0011\x0004ZÌ»?\x0011n\x001aý­}B\x001aØ\x0019\x001b´²…‰.º×˜�
°ƒ7\x0002xF@Ö4s&lt;ú\x001d@O®Ô</otherinfo>
  <evidence>tjh7qaPlWZCRWFfXjZu25UnTwyKwE8UR200Bvn8mJPTX19CngZkcnTy9_oAl2eYugechS_QiZZNuDtT9FpF8cDrZoREEWsy7PxFuGv2tfUIa2BkbtLKFiS6615iNDbCDNwJ4RkDWNHM8-h1AT67Ubw2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>¶8{©£åY�‘XW×�›¶åIÓÃ"°\x0013Å\x0011ÛM\x0001¾&#127;&amp;$ô××Ð§�™\x001c�&lt;½þ€%Ùæ.�ç!Kô"e“n\x000eÔý\x0016‘|p:Ù¡\x0011\x0004ZÌ»?\x0011n\x001aý­}B\x001aØ\x0019\x001b´²…‰.º×˜�
°ƒ7\x0002xF@Ö4s&lt;ú\x001d@O®Ô
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack>bQK92nf9aC6e31zGGirHDE46B_aPusoSWckTxFrcxhrYTTfQKD-2AZQ64bEItIoBv2pvNBCe87_WFJfjWjQ2ChkS2XGTsakqqpEBrG1QX3SffrNbyIuSB3rn5lAk2c6OXA2jppt6vH-UwntwL2F0ZYq9abgFrYhGe302olgLBkU1</attack>
  <otherinfo>m\x0002½Úwýh.žß\Æ\x001a*Ç\x000cN:\x0007ö�ºÊ\x0012YÉ\x0013ÄZÜÆ\x001aØM7Ð(?¶\x0001”:á±\x0008´Š\x0001¿jo4\x0010žó¿Ö\x0014—ãZ46
\x0019\x0012Ùq“±©*ª‘\x0001¬mP_tŸ~³[È‹’\x0007zçæP$ÙÎŽ\
£¦›z¼&#127;”Â{p/ateŠ½i¸\x0005­ˆF{}6¢X\x000b\x0006E5</otherinfo>
  <evidence>bQK92nf9aC6e31zGGirHDE46B_aPusoSWckTxFrcxhrYTTfQKD-2AZQ64bEItIoBv2pvNBCe87_WFJfjWjQ2ChkS2XGTsakqqpEBrG1QX3SffrNbyIuSB3rn5lAk2c6OXA2jppt6vH-UwntwL2F0ZYq9abgFrYhGe302olgLBkU1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>m\x0002½Úwýh.žß\Æ\x001a*Ç\x000cN:\x0007ö�ºÊ\x0012YÉ\x0013ÄZÜÆ\x001aØM7Ð(?¶\x0001”:á±\x0008´Š\x0001¿jo4\x0010žó¿Ö\x0014—ãZ46
	\x0019\x0012Ùq“±©*ª‘\x0001¬mP_tŸ~³[È‹’\x0007zçæP$ÙÎŽ\
£¦›z¼&#127;”Â{p/ateŠ½i¸\x0005­ˆF{}6¢X\x000b\x0006E5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [link] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/favicon.ico</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [link] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/favicon.ico
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [link] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/content/site.css</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [link] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/content/site.css
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [script] tag [src] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/scripts/modernizr-2.6.2.js</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [script] tag [src] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/scripts/modernizr-2.6.2.js
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [script] tag [src] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/scripts/jquery-2.1.0.js</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [script] tag [src] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/scripts/jquery-2.1.0.js
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [a] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [a] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [a] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/account/register</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [a] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/account/register
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [a] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/account/login</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [a] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/account/login
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [a] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/product/advsearch</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [a] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/product/advsearch
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [a] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/quack/now</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [a] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/quack/now
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [a] tag [href] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/secret</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [a] tag [href] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/secret
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10031</pluginid>
  <alert>User controllable HTML element attribute (potential XSS)</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param>content-type</param>
  <attack/>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp

appears to include user input in: 

a(n) [form] tag [action] attribute 

The user input found was:
ReturnUrl=/SqliModernApp

The user-controlled value was:
/sqlimodernapp/account/login?returnurl=%2fsqlimodernapp</otherinfo>
  <solution>Validate all input and sanitize output it before writing to any HTML attributes.
	</solution>
  <otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp
	
	appears to include user input in: 
	
	a(n) [form] tag [action] attribute 
	
	The user input found was:
	ReturnUrl=/SqliModernApp
	
	The user-controlled value was:
	/sqlimodernapp/account/login?returnurl=%2fsqlimodernapp
	</otherinfo>
  <reference>http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/Modernizr/Modernizr/issues/issue/21</attack>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏâ²Ëž</otherinfo>
  <evidence>com/Modernizr/Modernizr/issues/issue/21</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏâ²Ëž
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/Modernizr/Modernizr/issues/333</attack>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏ÷</otherinfo>
  <evidence>com/Modernizr/Modernizr/issues/333</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏ÷
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/Modernizr/Modernizr/issues/issue/97/</attack>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏâ²ËžÿÞÿ</otherinfo>
  <evidence>com/Modernizr/Modernizr/issues/issue/97/</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏâ²ËžÿÞÿ
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/Modernizr/Modernizr/issues/513</attack>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏù</otherinfo>
  <evidence>com/Modernizr/Modernizr/issues/513</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏù
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/NielsLeenheer/html5test/blob/9106a8/index</attack>
  <otherinfo>r‰¿6'¥°·žž\x0017ž¯ømš^mzË&#127;nZ\x001bÿÝté¯?Šw^</otherinfo>
  <evidence>com/NielsLeenheer/html5test/blob/9106a8/index</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿6'¥°·žž\x0017ž¯ømš^mzË&#127;nZ\x001bÿÝté¯?Šw^
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/Modernizr/Modernizr/issues/213</attack>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏö</otherinfo>
  <evidence>com/Modernizr/Modernizr/issues/213</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏö
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>com/Modernizr/Modernizr/issues/146</attack>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏõ</otherinfo>
  <evidence>com/Modernizr/Modernizr/issues/146</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>r‰¿2‡^®x³¯ó(uêç‹:ÿŠË.zÏõ
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10096</pluginid>
  <alert>Timestamp Disclosure - Unix</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>A timestamp was disclosed by the application/web server - Unix
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack>20090723</attack>
  <otherinfo>20090723, which evaluates to: 1970-08-21 18:15:23</otherinfo>
  <evidence>20090723</evidence>
  <solution>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
	</solution>
  <otherinfo>20090723, which evaluates to: 1970-08-21 18:15:23
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10027</pluginid>
  <alert>Information disclosure - suspicious comments</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>The response appears to contain suspicious comments which may help an attacker
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo>    // TODO :: make the prefixes more granular
    // TODO :: Add flag for hasownprop ? didn't last time
    // TODO :: add testDOMProps
             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
    // todo: hypothetically we could be doing an array of tests and use a basic loop here.
</otherinfo>
  <solution>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to
	</solution>
  <otherinfo>    // TODO :: make the prefixes more granular
	    // TODO :: Add flag for hasownprop ? didn't last time
	    // TODO :: add testDOMProps
	             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
	        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
	    // todo: hypothetically we could be doing an array of tests and use a basic loop here.
	
	</otherinfo>
  <reference>
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack>WD-DOM-Level-3-Events-20030331</attack>
  <otherinfo>X?ƒ8Ï‹z÷¥û&#127;„½éí³í´Ó}7</otherinfo>
  <evidence>WD-DOM-Level-3-Events-20030331</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>X?ƒ8Ï‹z÷¥û&#127;„½éí³í´Ó}7
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10096</pluginid>
  <alert>Timestamp Disclosure - Unix</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>A timestamp was disclosed by the application/web server - Unix
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack>20110929</attack>
  <otherinfo>20110929, which evaluates to: 1970-08-21 23:52:09</otherinfo>
  <evidence>20110929</evidence>
  <solution>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
	</solution>
  <otherinfo>20110929, which evaluates to: 1970-08-21 23:52:09
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10096</pluginid>
  <alert>Timestamp Disclosure - Unix</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>A timestamp was disclosed by the application/web server - Unix
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack>20030331</attack>
  <otherinfo>20030331, which evaluates to: 1970-08-21 01:28:51</otherinfo>
  <evidence>20030331</evidence>
  <solution>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
	</solution>
  <otherinfo>20030331, which evaluates to: 1970-08-21 01:28:51
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10027</pluginid>
  <alert>Information disclosure - suspicious comments</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>The response appears to contain suspicious comments which may help an attacker
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo>	// We allow this because of a bug in IE8/9 that throws an error
	// See http://bugs.jquery.com/ticket/13378
			// http://bugs.jquery.com/ticket/12359
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	// TODO: Now that all calls to _data and _removeData have been replaced
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Fixes bug #9237
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
</otherinfo>
  <solution>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to
	</solution>
  <otherinfo>	// We allow this because of a bug in IE8/9 that throws an error
		// See http://bugs.jquery.com/ticket/13378
				// http://bugs.jquery.com/ticket/12359
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		// TODO: Now that all calls to _data and _removeData have been replaced
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Fixes bug #9237
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	
	</otherinfo>
  <reference>
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2FSqliModernApp</uri>
  <param>.ASPXAUTH=1DB5578743359AC2C839A4289C63A5EAD4B3B4AB24C83FF57AF99CE77809E9DF91A1FA3E0A0A972C17FE3A9AF7B1297A1002B73B7AF32B1C9D133F1D3591C38EDF73FF35697BEF9731E61C64BDFC58472378428CCDCDE1EB17F5B108D40230B9A58B5A6E1C41906431787FD51EFDA8D4348F9FBC8810CF608AFFA68D83FD545E; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>.ASPXAUTH=1DB5578743359AC2C839A4289C63A5EAD4B3B4AB24C83FF57AF99CE77809E9DF91A1FA3E0A0A972C17FE3A9AF7B1297A1002B73B7AF32B1C9D133F1D3591C38EDF73FF35697BEF9731E61C64BDFC58472378428CCDCDE1EB17F5B108D40230B9A58B5A6E1C41906431787FD51EFDA8D4348F9FBC8810CF608AFFA68D83FD545E; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2FSqliModernApp</uri>
  <param>.ASPXAUTH=1DB5578743359AC2C839A4289C63A5EAD4B3B4AB24C83FF57AF99CE77809E9DF91A1FA3E0A0A972C17FE3A9AF7B1297A1002B73B7AF32B1C9D133F1D3591C38EDF73FF35697BEF9731E61C64BDFC58472378428CCDCDE1EB17F5B108D40230B9A58B5A6E1C41906431787FD51EFDA8D4348F9FBC8810CF608AFFA68D83FD545E; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>.ASPXAUTH=1DB5578743359AC2C839A4289C63A5EAD4B3B4AB24C83FF57AF99CE77809E9DF91A1FA3E0A0A972C17FE3A9AF7B1297A1002B73B7AF32B1C9D133F1D3591C38EDF73FF35697BEF9731E61C64BDFC58472378428CCDCDE1EB17F5B108D40230B9A58B5A6E1C41906431787FD51EFDA8D4348F9FBC8810CF608AFFA68D83FD545E; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10028</pluginid>
  <alert>Open redirect</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2FSqliModernApp</uri>
  <param>ReturnUrl</param>
  <attack>An attacker could supply a user with the following link: http://example.com/example.php?url=http://malicious.example.com</attack>
  <otherinfo>An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example: http://nottrusted.com/page?url=http://lookout.net.

The 301 or 302 response to a request for the following URL appeared to contain user input in the location header:

https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2FSqliModernApp

The user input found was:

ReturnUrl=/SqliModernApp

The context was:

/SqliModernApp</otherinfo>
  <solution>To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains
	</solution>
  <otherinfo>An open redirect controlled by POST parameters was detected. To test if this is a more serious issue, you should try resending that request as a GET, with the POST parameter included as a query string parameter. For example: http://nottrusted.com/page?url=http://lookout.net.
	
	The 301 or 302 response to a request for the following URL appeared to contain user input in the location header:
	
	https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2FSqliModernApp
	
	The user input found was:
	
	ReturnUrl=/SqliModernApp
	
	The context was:
	
	/SqliModernApp
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Open_redirect
	https://owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards
	https://cwe.mitre.org/data/definitions/601.html
	</reference>
  <wascid>38</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>C7Z9XspjbJkYYftPS6i2crMcdLyYblzgRZjAKNhOkWRHcMBXF0lim1snmYXQlMqpiadMBRP</attack>
  <otherinfo>\x000b¶}^Êcl™\x0018aûOK¨¶r³\x001ct¼˜n\àE˜À(ØN‘dGpÀW\x0017Ib›['™…Ð”Ê©‰§L</otherinfo>
  <evidence>C7Z9XspjbJkYYftPS6i2crMcdLyYblzgRZjAKNhOkWRHcMBXF0lim1snmYXQlMqpiadMBRP</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x000b¶}^Êcl™\x0018aûOK¨¶r³\x001ct¼˜n\àE˜À(ØN‘dGpÀW\x0017Ib›['™…Ð”Ê©‰§L
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>TpondxWlsA1SnEHpcXMifVWpQP2EkTFTgx1FfhOBKb7oCzRGaC9Jz</attack>
  <otherinfo>Nš'w\x0015¥°
RœAéqs"}U©@ý„‘1Sƒ\x001dE~\x0013�)¾è\x000b4Fh/I</otherinfo>
  <evidence>TpondxWlsA1SnEHpcXMifVWpQP2EkTFTgx1FfhOBKb7oCzRGaC9Jz</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>Nš'w\x0015¥°
RœAéqs"}U©@ý„‘1Sƒ\x001dE~\x0013�)¾è\x000b4Fh/I
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>/SqliModernApp/Images/orderedList0</attack>
  <otherinfo>ý*¥ˆÊ\x001dz¹À¦ŸÈ™¨\x001e³ú+uêÞt¸¬</otherinfo>
  <evidence>/SqliModernApp/Images/orderedList0</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ý*¥ˆÊ\x001dz¹À¦ŸÈ™¨\x001e³ú+uêÞt¸¬
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>C7Z9XspjbJkYYftPS6i2crMcdLyYblzgRZjAKNhOkWRHcMBXF0lim1snmYXQlMqpiadMBRP_PFa-rsz5n-TpondxWlsA1SnEHpcXMifVWpQP2EkTFTgx1FfhOBKb7oCzRGaC9Jz-rUUC8VAEyWGoI6p9MY4-AF6FWn24CSWtYus1</attack>
  <otherinfo>\x000b¶}^Êcl™\x0018aûOK¨¶r³\x001ct¼˜n\àE˜À(ØN‘dGpÀW\x0017Ib›['™…Ð”Ê©‰§L\x0005\x0013ÿ&lt;V¾®ÌùŸäé¢wqZ[\x0000Õ)Ä\x001e—\x00172'ÕZ”\x000fØI\x0013\x001581ÔWá8\x0012›î€³Df‚ôœþ­E\x0002ñP\x0004Éa¨#ª}1Ž&gt;\x0000^…Z}¸	%­bë5</otherinfo>
  <evidence>C7Z9XspjbJkYYftPS6i2crMcdLyYblzgRZjAKNhOkWRHcMBXF0lim1snmYXQlMqpiadMBRP_PFa-rsz5n-TpondxWlsA1SnEHpcXMifVWpQP2EkTFTgx1FfhOBKb7oCzRGaC9Jz-rUUC8VAEyWGoI6p9MY4-AF6FWn24CSWtYus1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x000b¶}^Êcl™\x0018aûOK¨¶r³\x001ct¼˜n\àE˜À(ØN‘dGpÀW\x0017Ib›['™…Ð”Ê©‰§L\x0005\x0013ÿ&lt;V¾®ÌùŸäé¢wqZ[\x0000Õ)Ä\x001e—\x00172'ÕZ”\x000fØI\x0013\x001581ÔWá8\x0012›î€³Df‚ôœþ­E\x0002ñP\x0004Éa¨#ª}1Ž&gt;\x0000^…Z}¸	%­bë5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>ASP.NET_SessionId=armu3yqgephuyerl13aeywgc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=armu3yqgephuyerl13aeywgc; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>ASP.NET_SessionId=armu3yqgephuyerl13aeywgc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=armu3yqgephuyerl13aeywgc; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W_M-zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW_tOJqNDfAZhTHfiMYTY_sZA3_4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W_M-zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW_tOJqNDfAZhTHfiMYTY_sZA3_4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W_M-zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW_tOJqNDfAZhTHfiMYTY_sZA3_4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W_M-zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW_tOJqNDfAZhTHfiMYTY_sZA3_4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W</attack>
  <otherinfo>w¢\x001c\x000cž)Î€\x0000"ð¤\x000f\x001bÝÀlTò¦@</otherinfo>
  <evidence>d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>w¢\x001c\x000cž)Î€\x0000"ð¤\x000f\x001bÝÀlTò¦@
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW</attack>
  <otherinfo>ÌÜÔp'õ\x0018ÙÈòå:8yÍÓ‘–Ò�m|=Á</otherinfo>
  <evidence>zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÌÜÔp'õ\x0018ÙÈòå:8yÍÓ‘–Ò�m|=Á
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2</attack>
  <otherinfo>âw\x001b°\x001b`žÙ\x001eDÍ‰¡&gt;ÐU]ïÍbà\x000fpŠ\sµc\x001bQ›\x001c§a‹¥Òšð\x0014që</otherinfo>
  <evidence>4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>âw\x001b°\x001b`žÙ\x001eDÍ‰¡&gt;ÐU]ïÍbà\x000fpŠ\sµc\x001bQ›\x001c§a‹¥Òšð\x0014që
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>DX3krJCYd2GFNRFQSMczzlVG4MTeCBFbvNs</attack>
  <otherinfo>
}ä¬�˜wa…5\x0011PHÇ3ÎUFàÄÞ\x0008\x0011[</otherinfo>
  <evidence>DX3krJCYd2GFNRFQSMczzlVG4MTeCBFbvNs</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>
}ä¬�˜wa…5\x0011PHÇ3ÎUFàÄÞ\x0008\x0011[
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>2FB1JbEYpkCvl1P4GomaYdrPoi7Q06EY9FtWuiHfoKQmxf459jNecaDA4OgDovmGXts40eMG6yzeaXr</attack>
  <otherinfo>ØPu%±\x0018¦@¯—Sø\x001a‰šaÚÏ¢.ÐÓ¡\x0018ô[Vº!ß ¤&amp;Åþ9ö3^q Ààè\x0003¢ù†^Û8Ñã\x0006ë,Þ</otherinfo>
  <evidence>2FB1JbEYpkCvl1P4GomaYdrPoi7Q06EY9FtWuiHfoKQmxf459jNecaDA4OgDovmGXts40eMG6yzeaXr</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ØPu%±\x0018¦@¯—Sø\x001a‰šaÚÏ¢.ÐÓ¡\x0018ô[Vº!ß ¤&amp;Åþ9ö3^q Ààè\x0003¢ù†^Û8Ñã\x0006ë,Þ
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W_M-zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW_tOJqNDfAZhTHfiMYTY_sZA3_4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2</attack>
  <otherinfo>w¢\x001c\x000cž)Î€\x0000"ð¤\x000f\x001bÝÀlTò¦@Ûµ¿3ìÍÍG\x0002&#127;Q�œ�.S£‡œÝ9\x0019m)Ö×ÃÜ\x0015¿´âj47Àf\x0014Ç~#\x0018M�ìd
ÿâw\x001b°\x001b`žÙ\x001eDÍ‰¡&gt;ÐU]ïÍbà\x000fpŠ\sµc\x001bQ›\x001c§a‹¥Òšð\x0014që</otherinfo>
  <evidence>d6IcDJ4pzoAAIvCkDxvdwGxU8qZA27W_M-zNzUcCf1GNnI8uU6OHnN05GW0p1tfD3BW_tOJqNDfAZhTHfiMYTY_sZA3_4ncbsBtgntkeRM2JoT7QVV3vzWLgD3CKXHO1YxtRmxynYYul0prwFHHrag2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>w¢\x001c\x000cž)Î€\x0000"ð¤\x000f\x001bÝÀlTò¦@Ûµ¿3ìÍÍG\x0002&#127;Q�œ�.S£‡œÝ9\x0019m)Ö×ÃÜ\x0015¿´âj47Àf\x0014Ç~#\x0018M�ìd
ÿâw\x001b°\x001b`žÙ\x001eDÍ‰¡&gt;ÐU]ïÍbà\x000fpŠ\sµc\x001bQ›\x001c§a‹¥Òšð\x0014që
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp</uri>
  <param/>
  <attack>DX3krJCYd2GFNRFQSMczzlVG4MTeCBFbvNs-jQY1juMXbV1wLZHtu3V1v5TQ-2FB1JbEYpkCvl1P4GomaYdrPoi7Q06EY9FtWuiHfoKQmxf459jNecaDA4OgDovmGXts40eMG6yzeaXr_-_t1e7zbuXR3tWxb08W1yqkSAG772k1</attack>
  <otherinfo>
}ä¬�˜wa…5\x0011PHÇ3ÎUFàÄÞ\x0008\x0011[¼Û&gt;�\x00065Žã\x0017m]p-‘í»uu¿”ÐûaAÔ–Äb™\x0002¾]Oàj&amp;i‡k&gt;ˆ»CN„cÑmZè‡~‚�›\x0017øçØÍyÆƒ\x0003ƒ \x000e‹æ\x0019{lãGŒ\x001b¬³y¥ëÿïíÕîónåÑÞÕ±oO\x0016×*¤H\x0001»ïi5</otherinfo>
  <evidence>DX3krJCYd2GFNRFQSMczzlVG4MTeCBFbvNs-jQY1juMXbV1wLZHtu3V1v5TQ-2FB1JbEYpkCvl1P4GomaYdrPoi7Q06EY9FtWuiHfoKQmxf459jNecaDA4OgDovmGXts40eMG6yzeaXr_-_t1e7zbuXR3tWxb08W1yqkSAG772k1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>
}ä¬�˜wa…5\x0011PHÇ3ÎUFàÄÞ\x0008\x0011[¼Û&gt;�\x00065Žã\x0017m]p-‘í»uu¿”ÐûaAÔ–Äb™\x0002¾]Oàj&amp;i‡k&gt;ˆ»CN„cÑmZè‡~‚�›\x0017øçØÍyÆƒ\x0003ƒ \x000e‹æ\x0019{lãGŒ\x001b¬³y¥ëÿïíÕîónåÑÞÕ±oO\x0016×*¤H\x0001»ïi5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=ad558YAnaMR-OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14_7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q_tIAyWR0tvixSEKOpOGi3E3ZsqsqR_AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl-bZiHw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=ad558YAnaMR-OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14_7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q_tIAyWR0tvixSEKOpOGi3E3ZsqsqR_AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl-bZiHw2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param>ASP.NET_SessionId=v5cknqxfwo3jtran4k3apfse; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=v5cknqxfwo3jtran4k3apfse; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=ad558YAnaMR-OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14_7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q_tIAyWR0tvixSEKOpOGi3E3ZsqsqR_AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl-bZiHw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=ad558YAnaMR-OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14_7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q_tIAyWR0tvixSEKOpOGi3E3ZsqsqR_AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl-bZiHw2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param>ASP.NET_SessionId=v5cknqxfwo3jtran4k3apfse; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=v5cknqxfwo3jtran4k3apfse; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14</attack>
  <otherinfo>;'oµY+ œo é&lt;nþœáV‹„m×ÓÛ|</otherinfo>
  <evidence>OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>;'oµY+ œo é&lt;nþœáV‹„m×ÓÛ|
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q</attack>
  <otherinfo>îM¢£Ú‚ª&lt;'P�s¦Æ'\x0010’‹ØÀ�Hþê</otherinfo>
  <evidence>7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>îM¢£Ú‚ª&lt;'P�s¦Æ'\x0010’‹ØÀ�Hþê
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl</attack>
  <otherinfo>\x0002q²	ùñåÝr\x0008\x0008™Ød
œ—\x0016pKs×&gt;	</otherinfo>
  <evidence>AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x0002q²	ùñåÝr\x0008\x0008™Ød
œ—\x0016pKs×&gt;	
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>P0YW3pVqo98msTCgaeXi7e5Z7LSGjUNJNKbVaNhd9D1xZMpoiX1ttRp2EG3aIBbAjmgTCpASTf9lSnNSyT6DkJAtYapa8vmVfkX2XnEDC7S1Gt5F6bRNBShGG7Ptfo1</attack>
  <otherinfo>?F\x0016Þ•j£ß&amp;±0 iåâíîYì´†�CI4¦ÕhØ]ô=qdÊh‰}mµ\x001av\x0010mÚ \x0016ÀŽh\x0013
�\x0012MÿeJsRÉ&gt;ƒ��-aªZòù•~Eö^q\x0003\x000b´µ\x001aÞEé´M\x0005(F\x001b³í</otherinfo>
  <evidence>P0YW3pVqo98msTCgaeXi7e5Z7LSGjUNJNKbVaNhd9D1xZMpoiX1ttRp2EG3aIBbAjmgTCpASTf9lSnNSyT6DkJAtYapa8vmVfkX2XnEDC7S1Gt5F6bRNBShGG7Ptfo1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>?F\x0016Þ•j£ß&amp;±0 iåâíîYì´†�CI4¦ÕhØ]ô=qdÊh‰}mµ\x001av\x0010mÚ \x0016ÀŽh\x0013
	�\x0012MÿeJsRÉ&gt;ƒ��-aªZòù•~Eö^q\x0003\x000b´µ\x001aÞEé´M\x0005(F\x001b³í
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>/SqliModernApp/Images/orderedList0</attack>
  <otherinfo>ý*¥ˆÊ\x001dz¹À¦ŸÈ™¨\x001e³ú+uêÞt¸¬</otherinfo>
  <evidence>/SqliModernApp/Images/orderedList0</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ý*¥ˆÊ\x001dz¹À¦ŸÈ™¨\x001e³ú+uêÞt¸¬
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>ad558YAnaMR-OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14_7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q_tIAyWR0tvixSEKOpOGi3E3ZsqsqR_AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl-bZiHw2</attack>
  <otherinfo>iÞyñ€'hÄ~;'oµY+ œo é&lt;nþœáV‹„m×ÓÛ|»^?îM¢£Ú‚ª&lt;'P�s¦Æ'\x0010’‹ØÀ�HþêþÒ\x0000Édt¶ø±HBŽ¤á¢ÜMÙ²«*Gð'\x001b ŸŸ\x001e]× €‰�†@ÙÉqg\x0004·=sà”%ù¶b</otherinfo>
  <evidence>ad558YAnaMR-OydvtVkroJxvIOk8bv6c4VaLhG3X09t8u14_7k2io9qCqjwnUJBzpsYnEJKL2MCQSP7q_tIAyWR0tvixSEKOpOGi3E3ZsqsqR_AnGyCfnx5d1yCAiZ2GQNnJcWcEtz1z4JQl-bZiHw2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>iÞyñ€'hÄ~;'oµY+ œo é&lt;nþœáV‹„m×ÓÛ|»^?îM¢£Ú‚ª&lt;'P�s¦Æ'\x0010’‹ØÀ�HþêþÒ\x0000Édt¶ø±HBŽ¤á¢ÜMÙ²«*Gð'\x001b ŸŸ\x001e]× €‰�†@ÙÉqg\x0004·=sà”%ù¶b
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack>Zwwoe9yPfiOwv56R6o5qVcLJDNDx-lwOSlIKiS0d1aJv_P0YW3pVqo98msTCgaeXi7e5Z7LSGjUNJNKbVaNhd9D1xZMpoiX1ttRp2EG3aIBbAjmgTCpASTf9lSnNSyT6DkJAtYapa8vmVfkX2XnEDC7S1Gt5F6bRNBShGG7Ptfo1</attack>
  <otherinfo>g\x000c({Ü�~#°¿ž‘êŽjUÂÉ\x000cÐñú\\x000eJR
‰-\x001dÕ¢oüý\x0018[zUª�|šÄÂ�§—‹·¹g²Ò\x001a5
$Ò›U£awÐõÅ“)¢%õ¶ÔiØA·h€[\x00029 L*@I7ý•)ÍK$ú\x000eB@µ†©kËæUù\x0017ÙyÄ\x000c.ÒÔky\x0017¦Ñ4\x0014¡\x0018nÏµú5</otherinfo>
  <evidence>Zwwoe9yPfiOwv56R6o5qVcLJDNDx-lwOSlIKiS0d1aJv_P0YW3pVqo98msTCgaeXi7e5Z7LSGjUNJNKbVaNhd9D1xZMpoiX1ttRp2EG3aIBbAjmgTCpASTf9lSnNSyT6DkJAtYapa8vmVfkX2XnEDC7S1Gt5F6bRNBShGG7Ptfo1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>g\x000c({Ü�~#°¿ž‘êŽjUÂÉ\x000cÐñú\\x000eJR
	‰-\x001dÕ¢oüý\x0018[zUª�|šÄÂ�§—‹·¹g²Ò\x001a5
$Ò›U£awÐõÅ“)¢%õ¶ÔiØA·h€[\x00029 L*@I7ý•)ÍK$ú\x000eB@µ†©kËæUù\x0017ÙyÄ\x000c.ÒÔky\x0017¦Ñ4\x0014¡\x0018nÏµú5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=4Cn9O_RFy9J1-4kiWwi0_9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4-V9fThZ38egUysTVJ664l-61vkuwN1H2gjzvug9Qjh7vKIV---ORXHrYurBWQNP6Py57Mw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=4Cn9O_RFy9J1-4kiWwi0_9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4-V9fThZ38egUysTVJ664l-61vkuwN1H2gjzvug9Qjh7vKIV---ORXHrYurBWQNP6Py57Mw2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param>ASP.NET_SessionId=f3v3cy0uafc2vxuja2yxpqrj; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=f3v3cy0uafc2vxuja2yxpqrj; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param>ASP.NET_SessionId=f3v3cy0uafc2vxuja2yxpqrj; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=f3v3cy0uafc2vxuja2yxpqrj; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=4Cn9O_RFy9J1-4kiWwi0_9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4-V9fThZ38egUysTVJ664l-61vkuwN1H2gjzvug9Qjh7vKIV---ORXHrYurBWQNP6Py57Mw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=4Cn9O_RFy9J1-4kiWwi0_9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4-V9fThZ38egUysTVJ664l-61vkuwN1H2gjzvug9Qjh7vKIV---ORXHrYurBWQNP6Py57Mw2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack>9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4</attack>
  <otherinfo>ö[jyÄk.TåÇÄ\x0016£"«,ï3´\x000e½- š§xh€’Âò$L\*—,µCñÝ\x0017</otherinfo>
  <evidence>9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ö[jyÄk.TåÇÄ\x0016£"«,ï3´\x000e½- š§xh€’Âò$L\*—,µCñÝ\x0017
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack>2y1u7G41yXKeUg2NdjUHfiyjXn7sScDRBtow</attack>
  <otherinfo>Û-nìn5ÉržR
�v5\x0007~,£^~ìIÀÑ\x0006Ú0</otherinfo>
  <evidence>2y1u7G41yXKeUg2NdjUHfiyjXn7sScDRBtow</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>Û-nìn5ÉržR
�v5\x0007~,£^~ìIÀÑ\x0006Ú0
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack>txgTdHvGcjXG4XNHCnsJ105N8r9gm5KDcfTSo9NxgyMKkWsg0rgvtfyHmF</attack>
  <otherinfo>·\x0018\x0013t{Ær5ÆásG
{	×NMò¿`›’ƒqôÒ£Óqƒ#
‘k Ò¸/µü‡</otherinfo>
  <evidence>txgTdHvGcjXG4XNHCnsJ105N8r9gm5KDcfTSo9NxgyMKkWsg0rgvtfyHmF</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>·\x0018\x0013t{Ær5ÆásG
	{	×NMò¿`›’ƒqôÒ£Óqƒ#
	‘k Ò¸/µü‡
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack>4Cn9O_RFy9J1-4kiWwi0_9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4-V9fThZ38egUysTVJ664l-61vkuwN1H2gjzvug9Qjh7vKIV---ORXHrYurBWQNP6Py57Mw2</attack>
  <otherinfo>à)ý;ôEËÒuû‰"[\x0008´ÿÙm©ç\x0011¬¹S—\x001f\x0010ZŒŠ¬³¼ÎÐ:ô´‚j�á¢\x0002K\x000bÈ‘1pª\²Õ\x000fÇt_exù__N\x0016wñè\x0014ÊÄÕ'®¸—îµ¾K°7Qö‚&lt;ïº\x000fPŽ\x001eï(…~ûã‘\zØº°V@Óú?.{</otherinfo>
  <evidence>4Cn9O_RFy9J1-4kiWwi0_9ltqecRrLlTlx8QWoyKrLO8ztA69LSCap3hogJLC8iRMXCqXLLVD8d0X2V4-V9fThZ38egUysTVJ664l-61vkuwN1H2gjzvug9Qjh7vKIV---ORXHrYurBWQNP6Py57Mw2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>à)ý;ôEËÒuû‰"[\x0008´ÿÙm©ç\x0011¬¹S—\x001f\x0010ZŒŠ¬³¼ÎÐ:ô´‚j�á¢\x0002K\x000bÈ‘1pª\²Õ\x000fÇt_exù__N\x0016wñè\x0014ÊÄÕ'®¸—îµ¾K°7Qö‚&lt;ïº\x000fPŽ\x001eï(…~ûã‘\zØº°V@Óú?.{
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack>XTC0ZseBD7KZJ_EjJSBJE1BTEdGYEhtc5WG3lITr-DCq_-mZHtZZn5-2y1u7G41yXKeUg2NdjUHfiyjXn7sScDRBtow-omCmhbjj_t-MoY-txgTdHvGcjXG4XNHCnsJ105N8r9gm5KDcfTSo9NxgyMKkWsg0rgvtfyHmF-MZe641</attack>
  <otherinfo>]0´fÇ�\x000f²™'ñ#% I\x0013PS\x0011Ñ˜\x0012\x001b\åa·”„ëø0ªÿé™\x001eÖYŸŸ¶Ë[»\x001b�r\§”ƒc]�Aß‹(×Ÿ»\x0012p4A¶Œ&gt;¢`¦…¸ãþßŒ¡�­Æ\x0004Ý\x001eñœ�q¸\ÑÂžÂuÓ“|¯Ø&amp;ä Ü}4¨ôÜ`ÈÂ¤ZÈ4®\x000bí&#127;!æ\x0017ã\x0019{®5</otherinfo>
  <evidence>XTC0ZseBD7KZJ_EjJSBJE1BTEdGYEhtc5WG3lITr-DCq_-mZHtZZn5-2y1u7G41yXKeUg2NdjUHfiyjXn7sScDRBtow-omCmhbjj_t-MoY-txgTdHvGcjXG4XNHCnsJ105N8r9gm5KDcfTSo9NxgyMKkWsg0rgvtfyHmF-MZe641</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>]0´fÇ�\x000f²™'ñ#% I\x0013PS\x0011Ñ˜\x0012\x001b\åa·”„ëø0ªÿé™\x001eÖYŸŸ¶Ë[»\x001b�r\§”ƒc]�Aß‹(×Ÿ»\x0012p4A¶Œ&gt;¢`¦…¸ãþßŒ¡�­Æ\x0004Ý\x001eñœ�q¸\ÑÂžÂuÓ“|¯Ø&amp;ä Ü}4¨ôÜ`ÈÂ¤ZÈ4®\x000bí&#127;!æ\x0017ã\x0019{®5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>60000</pluginid>
  <alert>Example Passive Scanner: Denial of Service</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.
	
	Many times DoS attacks will attempt to consume all of a web site's available system resources such as: CPU, memory, disk space etc. When any one of these critical resources reach full utilization, the web site will normally be inaccessible.
	
	As today's web application environments include a web server, database server and an authentication server, DoS at the application layer may target each of these independent components. Unlike DoS at the network layer, where a large number of connection attempts are required, DoS at the application layer is a much simpler task to perform.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Phase: Architecture and Design
	
	Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.
	
	Mitigation of resource exhaustion attacks requires that the target system either:
	      recognizes the attack and denies that user further access for a given amount of time, or
	      uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed. 
	
	The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, he may be able to prevent the user from accessing the server in question.
	
	The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.
	
	Ensure that protocols have specific limits of scale placed on them.
	
	Phase: Implementation
	Ensure that all failures in resource allocation place the system into a safe posture.
	</solution>
  <reference>http://projects.webappsec.org/Denial-of-Service
	http://cwe.mitre.org/data/definitions/400.html
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=xImmOjGp6YWNW9VdCFeKH1X5e-O0dOiedpS3CtSaCk-VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4-_rYDT6PaYsrIr_Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6_g2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=xImmOjGp6YWNW9VdCFeKH1X5e-O0dOiedpS3CtSaCk-VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4-_rYDT6PaYsrIr_Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6_g2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>ASP.NET_SessionId=zedexwsipt5pcihxxk3utqsa; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=zedexwsipt5pcihxxk3utqsa; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>ASP.NET_SessionId=zedexwsipt5pcihxxk3utqsa; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=zedexwsipt5pcihxxk3utqsa; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=xImmOjGp6YWNW9VdCFeKH1X5e-O0dOiedpS3CtSaCk-VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4-_rYDT6PaYsrIr_Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6_g2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=xImmOjGp6YWNW9VdCFeKH1X5e-O0dOiedpS3CtSaCk-VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4-_rYDT6PaYsrIr_Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6_g2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>input</param>
  <attack>&lt;input data-val="true" data-val-required="The Current password field is required." id="OldPassword" name="OldPassword" type="password" /&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4</attack>
  <otherinfo>V\x000cEŒÎ³¨\x0006W¥DbÄÛäkÀ¼€¨PÐÄîZ}ágY2%\x00061é"kŠÌ </otherinfo>
  <evidence>VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>V\x000cEŒÎ³¨\x0006W¥DbÄÛäkÀ¼€¨PÐÄîZ}ágY2%\x00061é"kŠÌ 
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6</attack>
  <otherinfo>1­R$•ü˜™±íæÉKÕd¨\x001cñêô	¤À‡‡hÆ</otherinfo>
  <evidence>Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>1­R$•ü˜™±íæÉKÕd¨\x001cñêô	¤À‡‡hÆ
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>cVc5io0R7uIMjdAWOruiqtxJkEckqgvcyZWH1cq4aU2bjNt984ULxsC</attack>
  <otherinfo>qW9Š�\x0011îâ\x000c�Ð\x0016:»¢ªÜI�G$ª\x000bÜÉ•‡ÕÊ¸iM›ŒÛ}ó…\x000b</otherinfo>
  <evidence>cVc5io0R7uIMjdAWOruiqtxJkEckqgvcyZWH1cq4aU2bjNt984ULxsC</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>qW9Š�\x0011îâ\x000c�Ð\x0016:»¢ªÜI�G$ª\x000bÜÉ•‡ÕÊ¸iM›ŒÛ}ó…\x000b
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>YuNvTEDemOpUNT6TvUfMF3eO9DBtPkhK1XY37xi5</attack>
  <otherinfo>bãoL@Þ˜êT5&gt;“½GÌ\x0017wŽô0m&gt;HJÕv7ï\x0018¹</otherinfo>
  <evidence>YuNvTEDemOpUNT6TvUfMF3eO9DBtPkhK1XY37xi5</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>bãoL@Þ˜êT5&gt;“½GÌ\x0017wŽô0m&gt;HJÕv7ï\x0018¹
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>8f0Ucuupg5cymHGuz0kDNtFpgqjeVgXxOXLckbA8l</attack>
  <otherinfo>ñý\x0014rë©ƒ—2˜q®ÏI\x00036Ñi‚¨ÞV\x0005ñ9rÜ‘°&lt;</otherinfo>
  <evidence>8f0Ucuupg5cymHGuz0kDNtFpgqjeVgXxOXLckbA8l</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ñý\x0014rë©ƒ—2˜q®ÏI\x00036Ñi‚¨ÞV\x0005ñ9rÜ‘°&lt;
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>xImmOjGp6YWNW9VdCFeKH1X5e-O0dOiedpS3CtSaCk-VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4-_rYDT6PaYsrIr_Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6_g2</attack>
  <otherinfo>Ä‰¦:1©é…�[Õ]\x0008WŠ\x001fUù{ã´tèžv”·
Ôš
O•ƒ\x0011c3¬ê\x0001•éQ\x0018±6ù\x001að/ *\x001441;–ŸxYÖL‰AŒzHšâ³\x00088ûúØ
&gt;�i‹+"¿ÌkT‰%&#127;&amp;&amp;l{y²RõY*\x0007&lt;z½\x0002i0!áÚ1º</otherinfo>
  <evidence>xImmOjGp6YWNW9VdCFeKH1X5e-O0dOiedpS3CtSaCk-VgxFjM6zqAZXpURixNvka8C8gKhQ0MTuWn3hZ1kyJQYx6SJriswg4-_rYDT6PaYsrIr_Ma1SJJX8mJmx7ebJS9VkqBzx6vQJpMCHh2jG6_g2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>Ä‰¦:1©é…�[Õ]\x0008WŠ\x001fUù{ã´tèžv”·
	Ôš
	O•ƒ\x0011c3¬ê\x0001•éQ\x0018±6ù\x001að/ *\x001441;–ŸxYÖL‰AŒzHšâ³\x00088ûúØ
&gt;�i‹+"¿ÌkT‰%&#127;&amp;&amp;l{y²RõY*\x0007&lt;z½\x0002i0!áÚ1º
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>7Mqj6w8S3n4RWMTfBSaJ-rd15MyQLXmdrdCEHoZ7Wd_cVc5io0R7uIMjdAWOruiqtxJkEckqgvcyZWH1cq4aU2bjNt984ULxsC_YuNvTEDemOpUNT6TvUfMF3eO9DBtPkhK1XY37xi5_ZLLRdgd3-GI8WIpW8P30uLzEQOx4Bf01</attack>
  <otherinfo>ìÊ£ë\x000f\x0012Þ~\x0011XÄß\x0005&amp;‰ú·uäÌ�-y�­Ð„\x001e†{YßÜUÎb£D{¸ƒ#t\x0005Ž®èª·\x0012d\x0011É*‚÷2eaõr®\x001aSfã6ß|áBñ°/Ø¸ÛÓ\x00107¦:•
O¤ïQó\x0005Ýã½\x000c\x001bO’\x0012µ]�ûÆ.&#127;d²Ñv\x0007wøb&lt;XŠVðýô¸¼Ä@ìx\x0005ý5</otherinfo>
  <evidence>7Mqj6w8S3n4RWMTfBSaJ-rd15MyQLXmdrdCEHoZ7Wd_cVc5io0R7uIMjdAWOruiqtxJkEckqgvcyZWH1cq4aU2bjNt984ULxsC_YuNvTEDemOpUNT6TvUfMF3eO9DBtPkhK1XY37xi5_ZLLRdgd3-GI8WIpW8P30uLzEQOx4Bf01</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ìÊ£ë\x000f\x0012Þ~\x0011XÄß\x0005&amp;‰ú·uäÌ�-y�­Ð„\x001e†{YßÜUÎb£D{¸ƒ#t\x0005Ž®èª·\x0012d\x0011É*‚÷2eaõr®\x001aSfã6ß|áBñ°/Ø¸ÛÓ\x00107¦:•
O¤ïQó\x0005Ýã½\x000c\x001bO’\x0012µ]�ûÆ.&#127;d²Ñv\x0007wøb&lt;XŠVðýô¸¼Ä@ìx\x0005ý5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>A-7ZwJtn7AftWvjLrI-xIXUT5pwUcZAu220JdTCq5hil_N4Kcz9A-zslpd8o1sv2wTLMK9Een-8f0Ucuupg5cymHGuz0kDNtFpgqjeVgXxOXLckbA8l-TyTWOMm-lzSpUS9BqV2Ak-xGO8IW3LUGTsUCr2bsky0_UNI7h3MAIUE1</attack>
  <otherinfo>\x0003îÙÀ›gì\x0007íZøË¬�±!u\x0013æœ\x0014q�.Ûm	u0ªæ\x0018¥üÞ
s?@û;%¥ß(ÖËöÁ2Ì+Ñ\x001eŸï\x001fÑG.º˜9s)‡\x001aìô�3m\x0016˜*�å`_\x0013—-É\x001b\x0003É~O$Ö8É¾—4©Q/A©]€“ìF;Â\x0016Üµ\x0006NÅ\x0002¯fì“-?PÒ;‡s\x0000!A5</otherinfo>
  <evidence>A-7ZwJtn7AftWvjLrI-xIXUT5pwUcZAu220JdTCq5hil_N4Kcz9A-zslpd8o1sv2wTLMK9Een-8f0Ucuupg5cymHGuz0kDNtFpgqjeVgXxOXLckbA8l-TyTWOMm-lzSpUS9BqV2Ak-xGO8IW3LUGTsUCr2bsky0_UNI7h3MAIUE1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x0003îÙÀ›gì\x0007íZøË¬�±!u\x0013æœ\x0014q�.Ûm	u0ªæ\x0018¥üÞ
	s?@û;%¥ß(ÖËöÁ2Ì+Ñ\x001eŸï\x001fÑG.º˜9s)‡\x001aìô�3m\x0016˜*�å`_\x0013—-É\x001b\x0003É~O$Ö8É¾—4©Q/A©]€“ìF;Â\x0016Üµ\x0006NÅ\x0002¯fì“-?PÒ;‡s\x0000!A5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=R6FJ2-s9xSx6AOBPxj-NACn1gNxPx6_cLSaf_7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8_MK2vtrP3aYA9Lcs-EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U_ALsRmJvbL2emzA2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=R6FJ2-s9xSx6AOBPxj-NACn1gNxPx6_cLSaf_7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8_MK2vtrP3aYA9Lcs-EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U_ALsRmJvbL2emzA2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param>ASP.NET_SessionId=m3whigel2tiirb0ds4jn3z04; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=m3whigel2tiirb0ds4jn3z04; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param>ASP.NET_SessionId=m3whigel2tiirb0ds4jn3z04; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=m3whigel2tiirb0ds4jn3z04; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=R6FJ2-s9xSx6AOBPxj-NACn1gNxPx6_cLSaf_7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8_MK2vtrP3aYA9Lcs-EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U_ALsRmJvbL2emzA2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=R6FJ2-s9xSx6AOBPxj-NACn1gNxPx6_cLSaf_7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8_MK2vtrP3aYA9Lcs-EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U_ALsRmJvbL2emzA2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8</attack>
  <otherinfo>î»žu\x001dS\x0010åï™7gœ8_#Y£tR×T¶s"…Ñ</otherinfo>
  <evidence>7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>î»žu\x001dS\x0010åï™7gœ8_#Y£tR×T¶s"…Ñ
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U</attack>
  <otherinfo>\x0012¢,A]S\x001cðl„c¬ŽÂAjM=éÜ$Ñ½²s\x0018Š_\x001dg</otherinfo>
  <evidence>EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x0012¢,A]S\x001cðl„c¬ŽÂAjM=éÜ$Ñ½²s\x0018Š_\x001dg
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>lB3uemWYiKmlSviH74SWnHNkkFd1cGKMXQkXRDiioIifrpPb2QERQBRhNvhXm4qgZRoRvRW1</attack>
  <otherinfo>”\x001dîze˜ˆ©¥Jø‡ï„–œsd�WupbŒ]	\x0017D8¢ ˆŸ®“ÛÙ\x0001\x0011@\x0014a6øW›Š e\x001a\x0011½\x0015µ</otherinfo>
  <evidence>lB3uemWYiKmlSviH74SWnHNkkFd1cGKMXQkXRDiioIifrpPb2QERQBRhNvhXm4qgZRoRvRW1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>”\x001dîze˜ˆ©¥Jø‡ï„–œsd�WupbŒ]	\x0017D8¢ ˆŸ®“ÛÙ\x0001\x0011@\x0014a6øW›Š e\x001a\x0011½\x0015µ
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>fPJuiP4Rr82qm3wPhlux2nJrj8zp11ytQ6sDWqEtPGZ3OFjaCD5iOzfvO4Y4rke8uyEEXfIe30N14rcnEi1CVNHHR2HVxjEHlU1</attack>
  <otherinfo>|ònˆþ\x0011¯Íª›|\x000f†[±Úrk�Ìé×\­C«\x0003Z¡-&lt;fw8XÚ\x0008&gt;b;7ï;†8®G¼»!\x0004]ò\x001eßCuâ·'\x0012-BTÑÇGaÕÆ1\x0007</otherinfo>
  <evidence>fPJuiP4Rr82qm3wPhlux2nJrj8zp11ytQ6sDWqEtPGZ3OFjaCD5iOzfvO4Y4rke8uyEEXfIe30N14rcnEi1CVNHHR2HVxjEHlU1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>|ònˆþ\x0011¯Íª›|\x000f†[±Úrk�Ìé×\­C«\x0003Z¡-&lt;fw8XÚ\x0008&gt;b;7ï;†8®G¼»!\x0004]ò\x001eßCuâ·'\x0012-BTÑÇGaÕÆ1\x0007
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>R6FJ2-s9xSx6AOBPxj-NACn1gNxPx6_cLSaf_7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8_MK2vtrP3aYA9Lcs-EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U_ALsRmJvbL2emzA2</attack>
  <otherinfo>G¡IÛë=Å,z\x0000àOÆ?�\x0000)õ€ÜOÇ¯Ü-&amp;ŸÿºîyÔuLC—¾dÝžpá|�f�ÑK]RÙÌŠ\x0017DœüüÂ¶¾ÚÏÝ¦\x0000ô·,øJˆ±\x0005uLsÁ²\x0011Ž²;	\x0005©4÷§p“FöÉÌb)|uŸ•?\x0000»\x0011˜›Û/g¦</otherinfo>
  <evidence>R6FJ2-s9xSx6AOBPxj-NACn1gNxPx6_cLSaf_7ruedR1TEOXvmTdnnDhfI1mjdFLXVLZzIoXRJz8_MK2vtrP3aYA9Lcs-EqIsQV1THPBshGOsjsJBak096dwk0b2ycxiKXx1n5U_ALsRmJvbL2emzA2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>G¡IÛë=Å,z\x0000àOÆ?�\x0000)õ€ÜOÇ¯Ü-&amp;ŸÿºîyÔuLC—¾dÝžpá|�f�ÑK]RÙÌŠ\x0017DœüüÂ¶¾ÚÏÝ¦\x0000ô·,øJˆ±\x0005uLsÁ²\x0011Ž²;	\x0005©4÷§p“FöÉÌb)|uŸ•?\x0000»\x0011˜›Û/g¦
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack>lB3uemWYiKmlSviH74SWnHNkkFd1cGKMXQkXRDiioIifrpPb2QERQBRhNvhXm4qgZRoRvRW1_fPJuiP4Rr82qm3wPhlux2nJrj8zp11ytQ6sDWqEtPGZ3OFjaCD5iOzfvO4Y4rke8uyEEXfIe30N14rcnEi1CVNHHR2HVxjEHlU1</attack>
  <otherinfo>”\x001dîze˜ˆ©¥Jø‡ï„–œsd�WupbŒ]	\x0017D8¢ ˆŸ®“ÛÙ\x0001\x0011@\x0014a6øW›Š e\x001a\x0011½\x0015µýóÉº#øF¿6ªmð&gt;\x0019nÇiÉ®?3§]rµ\x000e¬
j„´ñ™Üách ùˆìß¼î\x0018â¹\x001eòì„\x0011wÈ{}
×ŠÜœHµ	SG\x001d\x001d‡W\x0018Ä\x001eU5</otherinfo>
  <evidence>lB3uemWYiKmlSviH74SWnHNkkFd1cGKMXQkXRDiioIifrpPb2QERQBRhNvhXm4qgZRoRvRW1_fPJuiP4Rr82qm3wPhlux2nJrj8zp11ytQ6sDWqEtPGZ3OFjaCD5iOzfvO4Y4rke8uyEEXfIe30N14rcnEi1CVNHHR2HVxjEHlU1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>”\x001dîze˜ˆ©¥Jø‡ï„–œsd�WupbŒ]	\x0017D8¢ ˆŸ®“ÛÙ\x0001\x0011@\x0014a6øW›Š e\x001a\x0011½\x0015µýóÉº#øF¿6ªmð&gt;\x0019nÇiÉ®?3§]rµ\x000e¬
j„´ñ™Üách ùˆìß¼î\x0018â¹\x001eòì„\x0011wÈ{}
×ŠÜœHµ	SG\x001d\x001d‡W\x0018Ä\x001eU5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw_0o-_WL0uOhg2I52N9UmGoonj6DW0gQBGSd--JMXNoKUAEOGli23WiuFesdNH-SxEJtqw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw_0o-_WL0uOhg2I52N9UmGoonj6DW0gQBGSd--JMXNoKUAEOGli23WiuFesdNH-SxEJtqw2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>ASP.NET_SessionId=zkjxlual0uvlgfuodcigllee; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=zkjxlual0uvlgfuodcigllee; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>ASP.NET_SessionId=zkjxlual0uvlgfuodcigllee; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=zkjxlual0uvlgfuodcigllee; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw_0o-_WL0uOhg2I52N9UmGoonj6DW0gQBGSd--JMXNoKUAEOGli23WiuFesdNH-SxEJtqw2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw_0o-_WL0uOhg2I52N9UmGoonj6DW0gQBGSd--JMXNoKUAEOGli23WiuFesdNH-SxEJtqw2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw</attack>
  <otherinfo>`\x000cuŽ=’Ô”³…Åù`\x0003\x00160ì¨«;ÓÅ•o5Â5\x0002ÐÂèÝV!§ð«\x0004²µ÷æb(”;/N„\x0019nŒ8\x001f\x001apbÈË™</otherinfo>
  <evidence>YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>`\x000cuŽ=’Ô”³…Åù`\x0003\x00160ì¨«;ÓÅ•o5Â5\x0002ÐÂèÝV!§ð«\x0004²µ÷æb(”;/N„\x0019nŒ8\x001f\x001apbÈË™
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>WL0uOhg2I52N9UmGoonj6DW0gQBGSd</attack>
  <otherinfo>X½.:\x00186#��õI†¢‰ãè5´�\x0000F</otherinfo>
  <evidence>WL0uOhg2I52N9UmGoonj6DW0gQBGSd</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>X½.:\x00186#��õI†¢‰ãè5´�\x0000F
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>9UlCCjoljfraB3b3C6cI4QqrFE4kol3</attack>
  <otherinfo>õIB
:%�úÚ\x0007v÷\x000b§\x0008á
«\x0014N$</otherinfo>
  <evidence>9UlCCjoljfraB3b3C6cI4QqrFE4kol3</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>õIB
	:%�úÚ\x0007v÷\x000b§\x0008á
	«\x0014N$
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>6kziTDxWFRT10W7KYNdU44wSe1E47hXwu</attack>
  <otherinfo>êLâL&lt;V\x0015\x0014õÑnÊ`×TãŒ\x0012{Q8î\x0015ð</otherinfo>
  <evidence>6kziTDxWFRT10W7KYNdU44wSe1E47hXwu</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>êLâL&lt;V\x0015\x0014õÑnÊ`×TãŒ\x0012{Q8î\x0015ð
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw_0o-_WL0uOhg2I52N9UmGoonj6DW0gQBGSd--JMXNoKUAEOGli23WiuFesdNH-SxEJtqw2</attack>
  <otherinfo>`\x000cuŽ=’Ô”³…Åù`\x0003\x00160ì¨«;ÓÅ•o5Â5\x0002ÐÂèÝV!§ð«\x0004²µ÷æb(”;/N„\x0019nŒ8\x001f\x001apbÈË™Ãý(ûõ‹Òã¡ƒb9ØßT˜j(ž&gt;ƒ[H\x0010\x0004d�ûâL\Ú
P\x0001\x000e\x001aX¶Ýh®\x0015ë\x001d4&#127;’ÄBm</otherinfo>
  <evidence>YAx1jj2S1JSzhcX5YAMWMOyoqzvTxZVvNcI1AtDC6N1WIafwqwSytffmYiiUOy9OhBlujDgfGnBiyMuZw_0o-_WL0uOhg2I52N9UmGoonj6DW0gQBGSd--JMXNoKUAEOGli23WiuFesdNH-SxEJtqw2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>`\x000cuŽ=’Ô”³…Åù`\x0003\x00160ì¨«;ÓÅ•o5Â5\x0002ÐÂèÝV!§ð«\x0004²µ÷æb(”;/N„\x0019nŒ8\x001f\x001apbÈË™Ãý(ûõ‹Òã¡ƒb9ØßT˜j(ž&gt;ƒ[H\x0010\x0004d�ûâL\Ú
	P\x0001\x000e\x001aX¶Ýh®\x0015ë\x001d4&#127;’ÄBm
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>9UlCCjoljfraB3b3C6cI4QqrFE4kol3_iQwRwutUjKVD7hOtt29n5I_Tzqyidbo0uAWAgDIKT5Mt52KjqB-pnPs1nCLfsG3rXg4sq4Kk-6kziTDxWFRT10W7KYNdU44wSe1E47hXwu_oyAS21_BTEZLgL-va1LkaG965ONmCfdE1</attack>
  <otherinfo>õIB
:%�úÚ\x0007v÷\x000b§\x0008á
«\x0014N$¢]ÿ‰\x000c\x0011ÂëTŒ¥Cî\x0013­·ogä�ÓÎ¬¢uº4¸\x0005€€2
O“-çb£¨\x001f©œû5œ"ß°më^\x000e,«‚¤û©3‰0ñXTS×E»)ƒ]SŽ0IíDã¸WÂïèÈ\x0004¶×ðS\x0011’à/ëÚÔ¹\x001a\x001bÞ¹8Ù‚}Ñ5</otherinfo>
  <evidence>9UlCCjoljfraB3b3C6cI4QqrFE4kol3_iQwRwutUjKVD7hOtt29n5I_Tzqyidbo0uAWAgDIKT5Mt52KjqB-pnPs1nCLfsG3rXg4sq4Kk-6kziTDxWFRT10W7KYNdU44wSe1E47hXwu_oyAS21_BTEZLgL-va1LkaG965ONmCfdE1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>õIB
	:%�úÚ\x0007v÷\x000b§\x0008á
	«\x0014N$¢]ÿ‰\x000c\x0011ÂëTŒ¥Cî\x0013­·ogä�ÓÎ¬¢uº4¸\x0005€€2
	O“-çb£¨\x001f©œû5œ"ß°më^\x000e,«‚¤û©3‰0ñXTS×E»)ƒ]SŽ0IíDã¸WÂïèÈ\x0004¶×ðS\x0011’à/ëÚÔ¹\x001a\x001bÞ¹8Ù‚}Ñ5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10026</pluginid>
  <alert>HTTP Parameter Override</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Unspecified form action: HTTP parameter override attack potentially possible.
	This is a known problem with Java Servlets but other platforms may also be vulnerable.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack>&lt;form method="post" id="frmQuack"&gt;</attack>
  <otherinfo/>
  <solution>All forms must specify the action URL
	</solution>
  <reference>http://java.net/attachments/lists/servlet-spec/jsr340-experts/2012-06/15/OnParameterPollutionAttacks.pdf
	</reference>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param>ASP.NET_SessionId=41rr1ecjeykxs3srob5leiuh; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=41rr1ecjeykxs3srob5leiuh; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param>ASP.NET_SessionId=41rr1ecjeykxs3srob5leiuh; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=41rr1ecjeykxs3srob5leiuh; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param>ASP.NET_SessionId=oukrjbkrxk3vs13qa2zcaq5w; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=oukrjbkrxk3vs13qa2zcaq5w; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param>ASP.NET_SessionId=oukrjbkrxk3vs13qa2zcaq5w; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=oukrjbkrxk3vs13qa2zcaq5w; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param>ASP.NET_SessionId=x3iyuzqv4mwcegcncobmmewq; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=x3iyuzqv4mwcegcncobmmewq; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param>ASP.NET_SessionId=x3iyuzqv4mwcegcncobmmewq; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=x3iyuzqv4mwcegcncobmmewq; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param>ASP.NET_SessionId=jvyie3ytbw4rjhc2mrboohqq; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=jvyie3ytbw4rjhc2mrboohqq; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param>ASP.NET_SessionId=jvyie3ytbw4rjhc2mrboohqq; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=jvyie3ytbw4rjhc2mrboohqq; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/favicon.ico</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/favicon.ico</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/favicon.ico</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/favicon.ico</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList0.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList0.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList0.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList0.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList1.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList1.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList1.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList1.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList2.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList2.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList2.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList2.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList3.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList3.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList3.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/orderedList3.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param>ASP.NET_SessionId=wys1y4r5apitdwqgdgrizwwy; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=wys1y4r5apitdwqgdgrizwwy; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=hhHnYIUan6dKGYI40AtlgARNAZsVppsR_apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2-7o2iEzSRz_w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg_3LMAV_uFDbCwozyByfXb3FRsNc0bqyah4FA2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=hhHnYIUan6dKGYI40AtlgARNAZsVppsR_apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2-7o2iEzSRz_w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg_3LMAV_uFDbCwozyByfXb3FRsNc0bqyah4FA2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param>ASP.NET_SessionId=wys1y4r5apitdwqgdgrizwwy; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=wys1y4r5apitdwqgdgrizwwy; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=hhHnYIUan6dKGYI40AtlgARNAZsVppsR_apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2-7o2iEzSRz_w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg_3LMAV_uFDbCwozyByfXb3FRsNc0bqyah4FA2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=hhHnYIUan6dKGYI40AtlgARNAZsVppsR_apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2-7o2iEzSRz_w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg_3LMAV_uFDbCwozyByfXb3FRsNc0bqyah4FA2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>hhHnYIUan6dKGYI40AtlgARNAZsVppsR</attack>
  <otherinfo>†\x0011ç`…\x001aŸ§J\x0019‚8Ð\x000be€\x0004M\x0001›\x0015¦›\x0011</otherinfo>
  <evidence>hhHnYIUan6dKGYI40AtlgARNAZsVppsR</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>†\x0011ç`…\x001aŸ§J\x0019‚8Ð\x000be€\x0004M\x0001›\x0015¦›\x0011
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2</attack>
  <otherinfo>j•ÇÔ\x000fhD¸)^h\x0012q¤|Í,
eåª¶ëš™Õ\</otherinfo>
  <evidence>apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>j•ÇÔ\x000fhD¸)^h\x0012q¤|Í,
	eåª¶ëš™Õ\
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg</attack>
  <otherinfo>Ã­ñêX	@* ðT4í{é\x0012P5ZóÎß2`</otherinfo>
  <evidence>w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>Ã­ñêX	@* ðT4í{é\x0012P5ZóÎß2`
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>uFDbCwozyByfXb3FRsNc0bqyah4FA2</attack>
  <otherinfo>¸PÛ\x000b
3È\x001cŸ]½ÅFÃ\Ñº²j\x001e\x0005</otherinfo>
  <evidence>uFDbCwozyByfXb3FRsNc0bqyah4FA2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>¸PÛ\x000b
	3È\x001cŸ]½ÅFÃ\Ñº²j\x001e\x0005
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>6eFoZFmLZR8Xv3NiUBhkzqSei8v6mcRy0y5UNAL1PRQUb0jvoUZIRCjYaOlWwsmG5sicdAId7C5WEgLhZpMXEY2TmDqoU8y7cxvmGri9LxqPYTNL9eyw2ql1DGEcT76q58iTXVhn7k6mhCqUAdqX7LVj</attack>
  <otherinfo>éáhdY‹e\x001f\x0017¿sbP\x0018dÎ¤ž‹Ëú™ÄrÓ.T4\x0002õ=\x0014\x0014oHï¡FHD(ØhéVÂÉ†æÈœt\x0002\x001dì.V\x0012\x0002áf“\x0017\x0011�“˜:¨SÌ»s\x001bæ\x001a¸½/\x001a�a3Kõì°Ú©u\x000ca\x001cO¾ªçÈ“]XgîN¦„*”\x0001Ú—ìµc</otherinfo>
  <evidence>6eFoZFmLZR8Xv3NiUBhkzqSei8v6mcRy0y5UNAL1PRQUb0jvoUZIRCjYaOlWwsmG5sicdAId7C5WEgLhZpMXEY2TmDqoU8y7cxvmGri9LxqPYTNL9eyw2ql1DGEcT76q58iTXVhn7k6mhCqUAdqX7LVj</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>éáhdY‹e\x001f\x0017¿sbP\x0018dÎ¤ž‹Ëú™ÄrÓ.T4\x0002õ=\x0014\x0014oHï¡FHD(ØhéVÂÉ†æÈœt\x0002\x001dì.V\x0012\x0002áf“\x0017\x0011�“˜:¨SÌ»s\x001bæ\x001a¸½/\x001a�a3Kõì°Ú©u\x000ca\x001cO¾ªçÈ“]XgîN¦„*”\x0001Ú—ìµc
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>/SqliModernApp/Images/orderedList0</attack>
  <otherinfo>ý*¥ˆÊ\x001dz¹À¦ŸÈ™¨\x001e³ú+uêÞt¸¬</otherinfo>
  <evidence>/SqliModernApp/Images/orderedList0</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ý*¥ˆÊ\x001dz¹À¦ŸÈ™¨\x001e³ú+uêÞt¸¬
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>hhHnYIUan6dKGYI40AtlgARNAZsVppsR_apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2-7o2iEzSRz_w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg_3LMAV_uFDbCwozyByfXb3FRsNc0bqyah4FA2</attack>
  <otherinfo>†\x0011ç`…\x001aŸ§J\x0019‚8Ð\x000be€\x0004M\x0001›\x0015¦›\x0011ýªW\x001fP=¡\x0012à¥y IÆ‘ó4°)—–ªÛ®jgUr½¾î�¢\x00134‘Ïü:ß\x001e¥€”\x0002ª\x000f\x0005CN×¾‘%\x0003U¯&lt;íó&amp;\x000f÷,À\x0015þáCl,(Ï r}v÷\x0015\x001b
sFêÉ¨x</otherinfo>
  <evidence>hhHnYIUan6dKGYI40AtlgARNAZsVppsR_apXH1A9oRLgpXmgScaR8zSwKZeWqtuuamdVcr2-7o2iEzSRz_w63x6lgJQCqg8FQ07XvpElA1WvPO3zJg_3LMAV_uFDbCwozyByfXb3FRsNc0bqyah4FA2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>†\x0011ç`…\x001aŸ§J\x0019‚8Ð\x000be€\x0004M\x0001›\x0015¦›\x0011ýªW\x001fP=¡\x0012à¥y IÆ‘ó4°)—–ªÛ®jgUr½¾î�¢\x00134‘Ïü:ß\x001e¥€”\x0002ª\x000f\x0005CN×¾‘%\x0003U¯&lt;íó&amp;\x000f÷,À\x0015þáCl,(Ï r}v÷\x0015\x001b
sFêÉ¨x
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack>a_6eFoZFmLZR8Xv3NiUBhkzqSei8v6mcRy0y5UNAL1PRQUb0jvoUZIRCjYaOlWwsmG5sicdAId7C5WEgLhZpMXEY2TmDqoU8y7cxvmGri9LxqPYTNL9eyw2ql1DGEcT76q58iTXVhn7k6mhCqUAdqX7LVj-ax9-NL_xI1fgrdrA1</attack>
  <otherinfo>kþž\x0016†E˜¶Qñ{÷6%\x0001†LêIè¼¿©œG-2åC@/SÑAFôŽú\x0014d„B�†Ž•l,˜nl‰Ç@!ÞÂåa .\x0016i1q\x0018Ù9ƒª…&lt;Ë·1¾a«‹Òñ¨ö\x00134¿^Ë
ª—PÆ\x0011Äûê®|‰5Õ†~äêhB©@\x001d©~ËV?šÇß�/üHÕø+v°5</otherinfo>
  <evidence>a_6eFoZFmLZR8Xv3NiUBhkzqSei8v6mcRy0y5UNAL1PRQUb0jvoUZIRCjYaOlWwsmG5sicdAId7C5WEgLhZpMXEY2TmDqoU8y7cxvmGri9LxqPYTNL9eyw2ql1DGEcT76q58iTXVhn7k6mhCqUAdqX7LVj-ax9-NL_xI1fgrdrA1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>kþž\x0016†E˜¶Qñ{÷6%\x0001†LêIè¼¿©œG-2åC@/SÑAFôŽú\x0014d„B�†Ž•l,˜nl‰Ç@!ÞÂåa .\x0016i1q\x0018Ù9ƒª…&lt;Ë·1¾a«‹Òñ¨ö\x00134¿^Ë
ª—PÆ\x0011Äûê®|‰5Õ†~äêhB©@\x001d©~ËV?šÇß�/üHÕø+v°5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Add2?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Home/Search?Length=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>N/A</param>
  <attack>HTTP 500 Internal server error</attack>
  <otherinfo/>
  <evidence>HTTP 500 Internal server error</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10096</pluginid>
  <alert>Timestamp Disclosure - Unix</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>A timestamp was disclosed by the application/web server - Unix
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack>12288003</attack>
  <otherinfo>12288003, which evaluates to: 1970-05-23 10:50:03</otherinfo>
  <evidence>12288003</evidence>
  <solution>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
	</solution>
  <otherinfo>12288003, which evaluates to: 1970-05-23 10:50:03
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param>private</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param>ASP.NET_SessionId=l32h22qiquuutumc4aotozd2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=l32h22qiquuutumc4aotozd2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=GdoYys_ge_lHE9-Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI_MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3-s-BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW_N2YG2GZR8EeX8bG1KpuYt-X2BJbfQ2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=GdoYys_ge_lHE9-Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI_MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3-s-BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW_N2YG2GZR8EeX8bG1KpuYt-X2BJbfQ2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param>ASP.NET_SessionId=l32h22qiquuutumc4aotozd2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=l32h22qiquuutumc4aotozd2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=GdoYys_ge_lHE9-Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI_MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3-s-BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW_N2YG2GZR8EeX8bG1KpuYt-X2BJbfQ2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=GdoYys_ge_lHE9-Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI_MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3-s-BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW_N2YG2GZR8EeX8bG1KpuYt-X2BJbfQ2; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI</attack>
  <otherinfo>cs»÷ ˆæM’è€\x0012`ì+Ä›Ó ¾û\x0002uGÙ=�</otherinfo>
  <evidence>Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>cs»÷ ˆæM’è€\x0012`ì+Ä›Ó ¾û\x0002uGÙ=�
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW</attack>
  <otherinfo>\x0004AÏí²r\x0005·QX°í.èF…`X=tµo‚h</otherinfo>
  <evidence>BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x0004AÏí²r\x0005·QX°í.èF…`X=tµo‚h
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3</attack>
  <otherinfo>1hö¼(Ò‚È\x0000=œÔØî�o\x000e¨×,ê</otherinfo>
  <evidence>MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>1hö¼(Ò‚È\x0000=œÔØî�o\x000e¨×,ê
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>V8LsDjqRlpCm85G2ZOu0cYd59XTKPaTbzx6mJMBGAMikPZy3Tom</attack>
  <otherinfo>WÂì\x000e:‘–�¦ó‘¶dë´q‡yõtÊ=¤ÛÏ\x001e¦$ÀF\x0000È¤=œ·</otherinfo>
  <evidence>V8LsDjqRlpCm85G2ZOu0cYd59XTKPaTbzx6mJMBGAMikPZy3Tom</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>WÂì\x000e:‘–�¦ó‘¶dë´q‡yõtÊ=¤ÛÏ\x001e¦$ÀF\x0000È¤=œ·
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>8AUUcjNPMOcAPyoKlRd2oW6Zlsm2SnLU50SARZ4L00dOzhO039WKfxivCMtrA</attack>
  <otherinfo>ð\x0005\x0014r3O0ç\x0000?*
•\x0017v¡n™–É¶JrÔçD€Ež\x000bÓGNÎ\x0013´ßÕŠ&#127;\x0018¯\x0008Ëk</otherinfo>
  <evidence>8AUUcjNPMOcAPyoKlRd2oW6Zlsm2SnLU50SARZ4L00dOzhO039WKfxivCMtrA</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ð\x0005\x0014r3O0ç\x0000?*
	•\x0017v¡n™–É¶JrÔçD€Ež\x000bÓGNÎ\x0013´ßÕŠ&#127;\x0018¯\x0008Ëk
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</attack>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c
</otherinfo>
  <evidence>__RequestVerificationToken_L1NxbGlNb2Rlcm5BcHA1=</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>ÿô^ªç¬µW«‰øœjØ¨�:$z&#127;ËÔÜ[\x001aS[Ù\x0019\›�\\x001c

	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>GdoYys_ge_lHE9-Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI_MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3-s-BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW_N2YG2GZR8EeX8bG1KpuYt-X2BJbfQ2</attack>
  <otherinfo>\x0019Ú\x0018ÊÏà{ùG\x0013ß˜ÜîýÈ"9“dº \x0004˜;
ñ&amp;ôÈ/¾À�QöO`HüÅ£Úð£J\x000b \x0000ösScºA¼:£\³¨íþ³àD\x001cþÛ' [u\x0015‹\x000eÒî„hV\x0005ƒ×KVø&amp;‡–üÝ˜\x001ba™GÁ\x001e_ÆÆÔªnbß—Ø\x0012[</otherinfo>
  <evidence>GdoYys_ge_lHE9-Y3O79yCI5k2S6IASYOwrxJvTIL77AnVH2T2BI_MWj2vCjSgsgAPZzU2O6Qbw6o1yzqO3-s-BEHP7bJyBbdRWLDtLuhGhWBYPXS1b4JoeW_N2YG2GZR8EeX8bG1KpuYt-X2BJbfQ2</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>\x0019Ú\x0018ÊÏà{ùG\x0013ß˜ÜîýÈ"9“dº \x0004˜;
	ñ&amp;ôÈ/¾À�QöO`HüÅ£Úð£J\x000b \x0000ösScºA¼:£\³¨íþ³àD\x001cþÛ' [u\x0015‹\x000eÒî„hV\x0005ƒ×KVø&amp;‡–üÝ˜\x001ba™GÁ\x001e_ÆÆÔªnbß—Ø\x0012[
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10094</pluginid>
  <alert>Base64 Disclosure</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>Base64 encoded data was disclosed by the application/web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack>V8LsDjqRlpCm85G2ZOu0cYd59XTKPaTbzx6mJMBGAMikPZy3Tom-BeQ_V5FCO_EEn_8AUUcjNPMOcAPyoKlRd2oW6Zlsm2SnLU50SARZ4L00dOzhO039WKfxivCMtrA_sKx_0B111yiFZCJ8V-mNfg1PZvIo1ejrYJhuMTBaAlY1</attack>
  <otherinfo>WÂì\x000e:‘–�¦ó‘¶dë´q‡yõtÊ=¤ÛÏ\x001e¦$ÀF\x0000È¤=œ·N‰¾\x0005ä?W‘B;ñ\x0004Ÿÿ\x0000QG#4ó\x000ep\x0003ò ©Qwj\x0016é™l›d§-NtH\x0004Yà½4tìá;MýX§ñŠðŒ¶°?°¬&#127;Ð\x001du×(…d"|Wé�~
Ofò(Õèë`˜n10Z\x0002V5</otherinfo>
  <evidence>V8LsDjqRlpCm85G2ZOu0cYd59XTKPaTbzx6mJMBGAMikPZy3Tom-BeQ_V5FCO_EEn_8AUUcjNPMOcAPyoKlRd2oW6Zlsm2SnLU50SARZ4L00dOzhO039WKfxivCMtrA_sKx_0B111yiFZCJ8V-mNfg1PZvIo1ejrYJhuMTBaAlY1</evidence>
  <solution>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
	</solution>
  <otherinfo>WÂì\x000e:‘–�¦ó‘¶dë´q‡yõtÊ=¤ÛÏ\x001e¦$ÀF\x0000È¤=œ·N‰¾\x0005ä?W‘B;ñ\x0004Ÿÿ\x0000QG#4ó\x000ep\x0003ò ©Qwj\x0016é™l›d§-NtH\x0004Yà½4tìá;MýX§ñŠðŒ¶°?°¬&#127;Ð\x001du×(…d"|Wé�~
Ofò(Õèë`˜n10Z\x0002V5
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
	http://projects.webappsec.org/w/page/13246936/Information%20Leakage
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/coolduck.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/coolduck.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>60000</pluginid>
  <alert>Example Passive Scanner: Denial of Service</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.
	
	Many times DoS attacks will attempt to consume all of a web site's available system resources such as: CPU, memory, disk space etc. When any one of these critical resources reach full utilization, the web site will normally be inaccessible.
	
	As today's web application environments include a web server, database server and an authentication server, DoS at the application layer may target each of these independent components. Unlike DoS at the network layer, where a large number of connection attempts are required, DoS at the application layer is a much simpler task to perform.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/coolduck.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Phase: Architecture and Design
	
	Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.
	
	Mitigation of resource exhaustion attacks requires that the target system either:
	      recognizes the attack and denies that user further access for a given amount of time, or
	      uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed. 
	
	The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, he may be able to prevent the user from accessing the server in question.
	
	The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.
	
	Ensure that protocols have specific limits of scale placed on them.
	
	Phase: Implementation
	Ensure that all failures in resource allocation place the system into a safe posture.
	</solution>
  <reference>http://projects.webappsec.org/Denial-of-Service
	http://cwe.mitre.org/data/definitions/400.html
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/coolduck.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/coolduck.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>ASP.NET_SessionId=pjqt2pa0mvvrtlqszae1g1kr; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=pjqt2pa0mvvrtlqszae1g1kr; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param>ASP.NET_SessionId=pjqt2pa0mvvrtlqszae1g1kr; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=pjqt2pa0mvvrtlqszae1g1kr; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param>ASP.NET_SessionId=pjagx2ivv5silfz4tnk1ztfl; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=pjagx2ivv5silfz4tnk1ztfl; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param>ASP.NET_SessionId=pjagx2ivv5silfz4tnk1ztfl; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=pjagx2ivv5silfz4tnk1ztfl; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param>ASP.NET_SessionId=goft20g5cbq0xant14mbjcpe; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=goft20g5cbq0xant14mbjcpe; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param>ASP.NET_SessionId=goft20g5cbq0xant14mbjcpe; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=goft20g5cbq0xant14mbjcpe; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param>ASP.NET_SessionId=4zrued5rvyswbakn1b5vecs5; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=4zrued5rvyswbakn1b5vecs5; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param>ASP.NET_SessionId=4zrued5rvyswbakn1b5vecs5; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=4zrued5rvyswbakn1b5vecs5; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param>ASP.NET_SessionId=1ztz5zby4fpcdulya3rdngao; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=1ztz5zby4fpcdulya3rdngao; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param>ASP.NET_SessionId=1ztz5zby4fpcdulya3rdngao; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=1ztz5zby4fpcdulya3rdngao; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>60000</pluginid>
  <alert>Example Passive Scanner: Denial of Service</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.
	
	Many times DoS attacks will attempt to consume all of a web site's available system resources such as: CPU, memory, disk space etc. When any one of these critical resources reach full utilization, the web site will normally be inaccessible.
	
	As today's web application environments include a web server, database server and an authentication server, DoS at the application layer may target each of these independent components. Unlike DoS at the network layer, where a large number of connection attempts are required, DoS at the application layer is a much simpler task to perform.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Phase: Architecture and Design
	
	Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.
	
	Mitigation of resource exhaustion attacks requires that the target system either:
	      recognizes the attack and denies that user further access for a given amount of time, or
	      uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed. 
	
	The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, he may be able to prevent the user from accessing the server in question.
	
	The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.
	
	Ensure that protocols have specific limits of scale placed on them.
	
	Phase: Implementation
	Ensure that all failures in resource allocation place the system into a safe posture.
	</solution>
  <reference>http://projects.webappsec.org/Denial-of-Service
	http://cwe.mitre.org/data/definitions/400.html
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param>ASP.NET_SessionId=oglc1arjcxeqehtpvaeakrnc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=oglc1arjcxeqehtpvaeakrnc; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param>ASP.NET_SessionId=oglc1arjcxeqehtpvaeakrnc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=oglc1arjcxeqehtpvaeakrnc; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param>ASP.NET_SessionId=xoykx2kia42guxotvedxv01p; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=xoykx2kia42guxotvedxv01p; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param>ASP.NET_SessionId=xoykx2kia42guxotvedxv01p; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=xoykx2kia42guxotvedxv01p; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param>ASP.NET_SessionId=bcyxhoc2lluduz1b0imw55x4; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=bcyxhoc2lluduz1b0imw55x4; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param>ASP.NET_SessionId=bcyxhoc2lluduz1b0imw55x4; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=bcyxhoc2lluduz1b0imw55x4; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or no cache-control and pragma HTTPHeader set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The cache-control and pragma HTTPHeader have not been set properly allowing the browser and proxies to cache content
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param>private, s-maxage=0</param>
  <attack/>
  <otherinfo/>
  <solution>Whenever possible ensure the cache-control HTTPHeader is set with no-cache, no-store, must-revalidate, private, and the pragma HTTPHeader is set with no-cache.
	</solution>
  <reference>https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching
	</reference>
</alertitem>
<alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie set without secure flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param>ASP.NET_SessionId=rfglrsdotkgjfejgpjvqsvll; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=rfglrsdotkgjfejgpjvqsvll; path=/</evidence>
  <solution>Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted tunnel. Ensure that the secure flag is set for cookies containing such sensitive information.
	</solution>
  <reference>http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param>ASP.NET_SessionId=rfglrsdotkgjfejgpjvqsvll; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET_SessionId=rfglrsdotkgjfejgpjvqsvll; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10035</pluginid>
  <alert>Strict-Transport-Security Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS  connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.
	</solution>
  <reference>https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
	http://caniuse.com/stricttransportsecurity
	http://tools.ietf.org/html/rfc6797
	</reference>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/ajax-loader.gif</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10038</pluginid>
  <alert>Content Security Policy (CSP) Header Not Set</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/ajax-loader.gif</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to set Content Security Policy headers.
	</solution>
  <reference>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy
	https://www.owasp.org/index.php/Content_Security_Policy
	http://www.w3.org/TR/CSP/
	http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html
	http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	http://caniuse.com/#feat=contentsecuritypolicy
	</reference>
</alertitem>
<alertitem>
  <pluginid>10036</pluginid>
  <alert>Server Leaks Version Information via "Server" HTTP Response Header Field</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking version information via the "Server" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/ajax-loader.gif</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>Microsoft-IIS/8.5</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress the "Server" header or provide generic details.
	</solution>
  <reference>http://httpd.apache.org/docs/current/mod/core.html#servertokens
	http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007
	http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10037</pluginid>
  <alert>Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Images/ajax-loader.gif</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <evidence>ASP.NET</evidence>
  <solution>Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
	</solution>
  <reference>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx
	http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>20012</pluginid>
  <alert>Anti CSRF tokens scanner</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.
	
	CSRF attacks are effective in a number of situations, including:
	    * The victim has an active session on the target site.
	    * The victim is authenticated via HTTP auth on the target site.
	    * The victim is on the same local network as the target site.
	
	CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>None. Warning only.</param>
  <attack>No known Anti-CSRF tokens were found in the following HTML</attack>
  <otherinfo>Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.

Phase: Implementation
Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.

Phase: Architecture and Design
Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note that this can be bypassed using XSS.

Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note that this can be bypassed using XSS.

Use the ESAPI Session Management control.
This control includes a component for CSRF.

Do not use the GET method for any request that triggers a state change.

Phase: Implementation
Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</otherinfo>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</solution>
  <otherinfo>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</otherinfo>
  <reference>http://projects.webappsec.org/Cross-Site-Request-Forgery
	http://cwe.mitre.org/data/definitions/352.html
	</reference>
  <cweid>352</cweid>
  <wascid>9</wascid>
</alertitem>
<alertitem>
  <pluginid>20012</pluginid>
  <alert>Anti CSRF tokens scanner</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.
	
	CSRF attacks are effective in a number of situations, including:
	    * The victim has an active session on the target site.
	    * The victim is authenticated via HTTP auth on the target site.
	    * The victim is on the same local network as the target site.
	
	CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param>None. Warning only.</param>
  <attack>No known Anti-CSRF tokens were found in the following HTML</attack>
  <otherinfo>Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.

Phase: Implementation
Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.

Phase: Architecture and Design
Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note that this can be bypassed using XSS.

Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note that this can be bypassed using XSS.

Use the ESAPI Session Management control.
This control includes a component for CSRF.

Do not use the GET method for any request that triggers a state change.

Phase: Implementation
Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</otherinfo>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</solution>
  <otherinfo>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</otherinfo>
  <reference>http://projects.webappsec.org/Cross-Site-Request-Forgery
	http://cwe.mitre.org/data/definitions/352.html
	</reference>
  <cweid>352</cweid>
  <wascid>9</wascid>
</alertitem>
<alertitem>
  <pluginid>20012</pluginid>
  <alert>Anti CSRF tokens scanner</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.
	
	CSRF attacks are effective in a number of situations, including:
	    * The victim has an active session on the target site.
	    * The victim is authenticated via HTTP auth on the target site.
	    * The victim is on the same local network as the target site.
	
	CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param>None. Warning only.</param>
  <attack>No known Anti-CSRF tokens were found in the following HTML</attack>
  <otherinfo>Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.

Phase: Implementation
Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.

Phase: Architecture and Design
Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note that this can be bypassed using XSS.

Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note that this can be bypassed using XSS.

Use the ESAPI Session Management control.
This control includes a component for CSRF.

Do not use the GET method for any request that triggers a state change.

Phase: Implementation
Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</otherinfo>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</solution>
  <otherinfo>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</otherinfo>
  <reference>http://projects.webappsec.org/Cross-Site-Request-Forgery
	http://cwe.mitre.org/data/definitions/352.html
	</reference>
  <cweid>352</cweid>
  <wascid>9</wascid>
</alertitem>
<alertitem>
  <pluginid>20012</pluginid>
  <alert>Anti CSRF tokens scanner</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.
	
	CSRF attacks are effective in a number of situations, including:
	    * The victim has an active session on the target site.
	    * The victim is authenticated via HTTP auth on the target site.
	    * The victim is on the same local network as the target site.
	
	CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param>None. Warning only.</param>
  <attack>No known Anti-CSRF tokens were found in the following HTML</attack>
  <otherinfo>Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.

Phase: Implementation
Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.

Phase: Architecture and Design
Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note that this can be bypassed using XSS.

Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note that this can be bypassed using XSS.

Use the ESAPI Session Management control.
This control includes a component for CSRF.

Do not use the GET method for any request that triggers a state change.

Phase: Implementation
Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</otherinfo>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</solution>
  <otherinfo>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</otherinfo>
  <reference>http://projects.webappsec.org/Cross-Site-Request-Forgery
	http://cwe.mitre.org/data/definitions/352.html
	</reference>
  <cweid>352</cweid>
  <wascid>9</wascid>
</alertitem>
<alertitem>
  <pluginid>20012</pluginid>
  <alert>Anti CSRF tokens scanner</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.
	
	CSRF attacks are effective in a number of situations, including:
	    * The victim has an active session on the target site.
	    * The victim is authenticated via HTTP auth on the target site.
	    * The victim is on the same local network as the target site.
	
	CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param>None. Warning only.</param>
  <attack>No known Anti-CSRF tokens were found in the following HTML</attack>
  <otherinfo>Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.

Phase: Implementation
Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.

Phase: Architecture and Design
Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note that this can be bypassed using XSS.

Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note that this can be bypassed using XSS.

Use the ESAPI Session Management control.
This control includes a component for CSRF.

Do not use the GET method for any request that triggers a state change.

Phase: Implementation
Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</otherinfo>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</solution>
  <otherinfo>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</otherinfo>
  <reference>http://projects.webappsec.org/Cross-Site-Request-Forgery
	http://cwe.mitre.org/data/definitions/352.html
	</reference>
  <cweid>352</cweid>
  <wascid>9</wascid>
</alertitem>
<alertitem>
  <pluginid>20012</pluginid>
  <alert>Anti CSRF tokens scanner</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.
	
	CSRF attacks are effective in a number of situations, including:
	    * The victim has an active session on the target site.
	    * The victim is authenticated via HTTP auth on the target site.
	    * The victim is on the same local network as the target site.
	
	CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param>None. Warning only.</param>
  <attack>No known Anti-CSRF tokens were found in the following HTML</attack>
  <otherinfo>Phase: Architecture and Design
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
For example, use anti-CSRF packages such as the OWASP CSRFGuard.

Phase: Implementation
Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.

Phase: Architecture and Design
Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
Note that this can be bypassed using XSS.

Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
Note that this can be bypassed using XSS.

Use the ESAPI Session Management control.
This control includes a component for CSRF.

Do not use the GET method for any request that triggers a state change.

Phase: Implementation
Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</otherinfo>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</solution>
  <otherinfo>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	For example, use anti-CSRF packages such as the OWASP CSRFGuard.
	
	Phase: Implementation
	Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.
	
	Phase: Architecture and Design
	Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).
	Note that this can be bypassed using XSS.
	
	Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.
	Note that this can be bypassed using XSS.
	
	Use the ESAPI Session Management control.
	This control includes a component for CSRF.
	
	Do not use the GET method for any request that triggers a state change.
	
	Phase: Implementation
	Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.
	</otherinfo>
  <reference>http://projects.webappsec.org/Cross-Site-Request-Forgery
	http://cwe.mitre.org/data/definitions/352.html
	</reference>
  <cweid>352</cweid>
  <wascid>9</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch?q=%22%3Balert%281%29%3B%22</uri>
  <param>q</param>
  <attack>";alert(1);"</attack>
  <otherinfo/>
  <evidence>";alert(1);"</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>3-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [3-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [3-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>4-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [4-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [4-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>5-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [5-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [5-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>6-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [6-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [6-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>7-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [7-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [7-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryName"</param>
  <attack>Meat/Poultry AND 1=1 -- </attack>
  <otherinfo>The page results were successfully manipulated using the boolean conditions [Meat/Poultry AND 1=1 -- ] and [Meat/Poultry AND 1=2 -- ]
The parameter value being modified was stripped from the HTML output for the purposes of the comparison
Data was returned for the original parameter.
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The page results were successfully manipulated using the boolean conditions [Meat/Poultry AND 1=1 -- ] and [Meat/Poultry AND 1=2 -- ]
	The parameter value being modified was stripped from the HTML output for the purposes of the comparison
	Data was returned for the original parameter.
	The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection - Microsoft SQL Server</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>6 UNION ALL select NULL -- </attack>
  <otherinfo>RDBMS [Microsoft SQL Server] likely, given UNION-specific error message fragment [All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists] in HTML results
The vulnerability was detected by manipulating the parameter with an SQL UNION clause to cause a database error message to be returned and recognised</otherinfo>
  <evidence>All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists</evidence>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>RDBMS [Microsoft SQL Server] likely, given UNION-specific error message fragment [All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists] in HTML results
	The vulnerability was detected by manipulating the parameter with an SQL UNION clause to cause a database error message to be returned and recognised
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>9-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [9-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [9-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection - Microsoft SQL Server</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param>q"</param>
  <attack>oOIEyzqB' UNION ALL select NULL -- </attack>
  <otherinfo>RDBMS [Microsoft SQL Server] likely, given UNION-specific error message fragment [All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists] in HTML results
The vulnerability was detected by manipulating the parameter with an SQL UNION clause to cause a database error message to be returned and recognised</otherinfo>
  <evidence>All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists</evidence>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>RDBMS [Microsoft SQL Server] likely, given UNION-specific error message fragment [All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists] in HTML results
	The vulnerability was detected by manipulating the parameter with an SQL UNION clause to cause a database error message to be returned and recognised
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param>CategoryId"</param>
  <attack>10-2</attack>
  <otherinfo>The original page results were successfully replicated using the expression [10-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The original page results were successfully replicated using the expression [10-2] as the parameter value
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>90024</pluginid>
  <alert>Generic Padding Oracle</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This plugin should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param>__RequestVerificationToken</param>
  <attack>https://sqli:8021/SqliModernApp/Account/Manage</attack>
  <otherinfo/>
  <evidence>Internal Server Error</evidence>
  <solution>Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption.
	</solution>
  <reference>http://netifera.com/research/
	http://www.microsoft.com/technet/security/bulletin/ms10-070.mspx
	http://www.mono-project.com/Vulnerabilities#ASP.NET_Padding_Oracle
	https://bugzilla.redhat.com/show_bug.cgi?id=623799
	</reference>
  <cweid>209</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Manage</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Account/Login?ReturnUrl=%2fSqliModernApp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Content/site.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/List</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Add</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch?q=umhmwjeM</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/AdvSearch</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product/Search</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Product?categoryId=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Quack/Now</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/modernizr-2.6.2.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Scripts/jquery-2.1.0.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10001</pluginid>
  <alert>Secure page browser cache</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>Secure page can be cached in browser.  Cache control is not set in HTTP header nor HTML header.  Sensitive content can be recovered from browser storage.
	</desc>
  <uri>https://sqli:8021/SqliModernApp/Secret/Stash</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>The best way is to set HTTP header with: 'Pragma: No-cache' and 'Cache-control: No-cache'. 
	Alternatively, this can be set in the HTML header by: 
	&lt;META HTTP-EQUIV='Pragma' CONTENT='no-cache'&gt; 
	&lt;META HTTP-EQUIV='Cache-Control' CONTENT='no-cache'&gt; 
	but some browsers may have problem using this method.
	</solution>
  <reference>How to prevent caching in Internet Explorer - http://support.microsoft.com/default.aspx?kbid=234067
	Pragma: No-cache Tag May Not Prevent Page from Being Cached - http://support.microsoft.com/default.aspx?kbid=222064
	</reference>
  <cweid>525</cweid>
</alertitem>
</alerts></site></OWASPZAPReport>